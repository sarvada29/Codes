// Given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k
//Solution

class Solution {
    public int longestSubstring(String s, int k) {
        int len=0;
        int max=0;
        int i=0;
        int j=0;
        int a[]=new int[26];
        Arrays.fill(a,0);
       while(i<s.length()){
           a[s.charAt(i)-'a']++;
           i++;
       }
    boolean valid=true;
       for(int z=0;z<s.length();z++){
           if(a[s.charAt(z)-'a']>0 && a[s.charAt(z)-'a']<k){
               String sub=s.substring(j,z);
               max=Math.max(max,longestSubstring(sub,k));
               j=z+1;
               valid=false;
           }
       }
        if(valid){
            return s.length();
        }
        else{
            return Math.max(max, longestSubstring(s.substring(j),k));
        }
      
    }
}
