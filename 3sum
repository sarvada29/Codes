//Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

//Notice that the solution set must not contain duplicate triplets.

//Solution

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer> > list =new ArrayList<List<Integer> >();
        Arrays.sort(nums);
        if(nums.length<3){
            return list;
        }
        else{
        for(int i=0;i<nums.length-2;i++){
            if(i==0 || (i>0 && nums[i]!=nums[i-1])){
              int lo=i+1;
            int hi=nums.length-1;
            int sum=0-nums[i];
            while(lo<hi){
              int s=nums[lo]+nums[hi];
                if(sum==s){
                    List<Integer> l=new ArrayList<Integer>();
                        l.add(nums[i]);
                        l.add(nums[lo]);
                        l.add(nums[hi]);
                        list.add(l);
                    while(lo<hi && nums[lo]==nums[lo+1])lo++;
                    while(lo<hi && nums[hi]==nums[hi-1])hi--;
                    lo++;
                    hi--; 
                }
                else{
                    if(s<sum){
                        lo++;
                    }
                    else{
                        hi--;
                    }
                }
            }
            }
            }
        }
        return list;
}}
